import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
# Cualquier otra librer√≠a que est√©s usando

simulacion = st.selectbox(
    "Selecciona el tipo de simulaci√≥n:",
    ["Colisi√≥n 2D con Trayectorias", "Otro tipo de simulaci√≥n"]
)
if simulacion == "Colisi√≥n 2D con Trayectorias":
    st.header("üéØ Colisi√≥n 2D con Trayectorias")
    
    # Explicaci√≥n f√≠sica para colisiones 2D
    with st.expander("üìö Explicaci√≥n F√≠sica - Colisiones 2D", expanded=True):
        st.markdown("""
        ### üî¨ Fundamentos Te√≥ricos - Colisiones 2D
        
        **1. Conservaci√≥n del Momentum en 2D:**
        - El momentum se conserva en ambas direcciones (x e y)
        - Componente x: `m‚ÇÅv‚ÇÅ‚Çì·µ¢ + m‚ÇÇv‚ÇÇ‚Çì·µ¢ = m‚ÇÅv‚ÇÅ‚Çìf + m‚ÇÇv‚ÇÇ‚Çìf`
        - Componente y: `m‚ÇÅv‚ÇÅ·µß·µ¢ + m‚ÇÇv‚ÇÇ·µß·µ¢ = m‚ÇÅv‚ÇÅ·µßf + m‚ÇÇv‚ÇÇ·µßf`
        
        **2. An√°lisis Vectorial:**
        - Cada velocidad tiene componentes x e y
        - `v = ‚àö(v‚Çì¬≤ + v·µß¬≤)` (magnitud)
        - `Œ∏ = arctan(v·µß/v‚Çì)` (direcci√≥n)
        
        **3. Tipos de Colisiones 2D:**
        - **Frontales:** Objetos se mueven en la misma l√≠nea
        - **Oblicuas:** √Ångulo entre trayectorias ‚â† 0¬∞
        - **Tangenciales:** Contacto m√≠nimo, peque√±o cambio de direcci√≥n
        
        **4. Conservaci√≥n de Energ√≠a:**
        - El√°stica: `¬Ωm‚ÇÅv‚ÇÅ·µ¢¬≤ + ¬Ωm‚ÇÇv‚ÇÇ·µ¢¬≤ = ¬Ωm‚ÇÅv‚ÇÅf¬≤ + ¬Ωm‚ÇÇv‚ÇÇf¬≤`
        - Inel√°stica: Se pierde energ√≠a cin√©tica
        
        **5. Factores que Afectan la Colisi√≥n:**
        - **√Ångulo de impacto:** Determina la direcci√≥n de las velocidades finales
        - **Punto de contacto:** Influye en la transferencia de momentum
        - **Geometr√≠a de los objetos:** Esferas, cilindros, etc.
        
        **6. Aplicaciones Pr√°cticas:**
        - Colisiones de veh√≠culos
        - Deportes (billar, hockey, f√∫tbol)
        - Colisiones de part√≠culas subat√≥micas
        - Simulaciones de videojuegos
        """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Par√°metros de Entrada")
        m1 = st.number_input("Masa del objeto 1 (kg)", value=2.0, min_value=0.1, key="2d_m1")
        m2 = st.number_input("Masa del objeto 2 (kg)", value=1.5, min_value=0.1, key="2d_m2")
        
        st.markdown("**Velocidades iniciales objeto 1:**")
        v1x_i = st.number_input("Componente x (m/s)", value=4.0, key="2d_v1x")
        v1y_i = st.number_input("Componente y (m/s)", value=0.0, key="2d_v1y")
        
        st.markdown("**Velocidades iniciales objeto 2:**")
        v2x_i = st.number_input("Componente x (m/s)", value=0.0, key="2d_v2x")
        v2y_i = st.number_input("Componente y (m/s)", value=0.0, key="2d_v2y")
        
        angulo_colision = st.slider("√Ångulo de dispersi√≥n (grados)", 0, 90, 45)
        tipo_colision_2d = st.selectbox("Tipo de colisi√≥n:", ["El√°stica", "Inel√°stica"], key="tipo_2d")
        
        if tipo_colision_2d == "Inel√°stica":
            e_2d = st.slider("Coeficiente de restituci√≥n", 0.0, 1.0, 0.7, key="e_2d")
        else:
            e_2d = 1.0
    
    with col2:
        st.subheader("C√°lculos y Resultados")
        
        # Convertir √°ngulo a radianes
        theta = np.radians(angulo_colision)
        
        # C√°lculo mejorado para colisi√≥n 2D usando conservaci√≥n de momentum
        # Velocidad inicial del objeto 1
        v1i_mag = np.sqrt(v1x_i**2 + v1y_i**2)
        v2i_mag = np.sqrt(v2x_i**2 + v2y_i**2)
        
        # C√°lculo de velocidades finales usando conservaci√≥n de momentum y energ√≠a
        if v1i_mag > 0 or v2i_mag > 0:
            # Momentum inicial
            px_i = m1 * v1x_i + m2 * v2x_i
            py_i = m1 * v1y_i + m2 * v2y_i
            
            # Para simplificar, usamos una aproximaci√≥n basada en colisi√≥n el√°stica/inel√°stica
            # Velocidades finales aproximadas
            if v2i_mag == 0:  # Objeto 2 en reposo
                v1f_mag = v1i_mag * (m1 - e_2d*m2) / (m1 + m2)
                v2f_mag = v1i_mag * (1 + e_2d) * m1 / (m1 + m2)
                
                # Aplicar √°ngulo de dispersi√≥n
                v1x_f = v1f_mag * np.cos(theta)
                v1y_f = v1f_mag * np.sin(theta)
                v2x_f = v2f_mag * np.cos(-theta/2)
                v2y_f = v2f_mag * np.sin(-theta/2)
            else:
                # Caso general - conservaci√≥n de momentum
                masa_total = m1 + m2
                v1x_f = ((m1 - e_2d*m2)*v1x_i + (1+e_2d)*m2*v2x_i) / masa_total
                v1y_f = ((m1 - e_2d*m2)*v1y_i + (1+e_2d)*m2*v2y_i) / masa_total
                v2x_f = ((m2 - e_2d*m1)*v2x_i + (1+e_2d)*m1*v1x_i) / masa_total
                v2y_f = ((m2 - e_2d*m1)*v2y_i + (1+e_2d)*m1*v1y_i) / masa_total
        else:
            v1x_f = v1y_f = v2x_f = v2y_f = 0
        
        # Mostrar resultados
        st.markdown("**Velocidades finales objeto 1:**")
        st.write(f"v‚Çì = {v1x_f:.2f} m/s")
        st.write(f"v·µß = {v1y_f:.2f} m/s")
        st.write(f"Magnitud: {np.sqrt(v1x_f**2 + v1y_f**2):.2f} m/s")
        
        st.markdown("**Velocidades finales objeto 2:**")
        st.write(f"v‚Çì = {v2x_f:.2f} m/s")
        st.write(f"v·µß = {v2y_f:.2f} m/s")
        st.write(f"Magnitud: {np.sqrt(v2x_f**2 + v2y_f**2):.2f} m/s")
        
        # Verificar conservaci√≥n del momentum
        px_inicial = m1 * v1x_i + m2 * v2x_i
        py_inicial = m1 * v1y_i + m2 * v2y_i
        px_final = m1 * v1x_f + m2 * v2x_f
        py_final = m1 * v1y_f + m2 * v2y_f
        
        # Energ√≠as
        ke_inicial_2d = 0.5 * m1 * (v1x_i**2 + v1y_i**2) + 0.5 * m2 * (v2x_i**2 + v2y_i**2)
        ke_final_2d = 0.5 * m1 * (v1x_f**2 + v1y_f**2) + 0.5 * m2 * (v2x_f**2 + v2y_f**2)
        
        conservacion_px = abs(px_inicial - px_final) < 0.1
        conservacion_py = abs(py_inicial - py_final) < 0.1
        
        if conservacion_px:
            st.success("‚úÖ **Momentum x conservado**")
        else:
            st.error("‚ùå **Error en momentum x**")
            
        if conservacion_py:
            st.success("‚úÖ **Momentum y conservado**")
        else:
            st.error("‚ùå **Error en momentum y**")
        
        energia_perdida_2d = ke_inicial_2d - ke_final_2d
        if energia_perdida_2d > 0.01:
            st.warning(f"‚ö†Ô∏è **Energ√≠a perdida:** {energia_perdida_2d:.2f} J")
        else:
            st.success("‚úÖ **Energ√≠a conservada**")

    # ================================
    # SECCI√ìN DE ANIMACI√ìN INTERACTIVA CORREGIDA
    # ================================
    
    # Bot√≥n para controlar la animaci√≥n
    col_anim1, col_anim2, col_anim3 = st.columns([1, 1, 1])
    with col_anim1:
        mostrar_animacion = st.checkbox("üé¨ Mostrar Animaci√≥n", value=True)
    with col_anim2:
        velocidad_animacion = st.slider("Velocidad animaci√≥n (ms)", 50, 500, 150, step=50)
    with col_anim3:
        mostrar_vectores = st.checkbox("‚û°Ô∏è Mostrar vectores velocidad", value=True)

    if mostrar_animacion:
        # Crear animaci√≥n de la colisi√≥n
        st.subheader("üé¨ Animaci√≥n de la Colisi√≥n 2D")
        
        # Par√°metros de la animaci√≥n
        fps = 20
        duracion_total = 4.0  # segundos
        frames_total = int(fps * duracion_total)
        tiempo_colision = duracion_total / 2  # La colisi√≥n ocurre a la mitad
        
        # Posiciones iniciales de los objetos (m√°s separados)
        pos_inicial_1 = np.array([-6.0, 1.0])
        pos_inicial_2 = np.array([4.0, -1.5])
        
        # Crear figura de animaci√≥n
        fig_anim = go.Figure()
        
        # Calcular todas las posiciones para determinar los l√≠mites
        tiempos = np.linspace(0, duracion_total, frames_total)
        todas_pos_x = []  
        todas_pos_y = []
        
        for t in tiempos:
            if t < tiempo_colision:
                pos_1 = pos_inicial_1 + np.array([v1x_i, v1y_i]) * t
                pos_2 = pos_inicial_2 + np.array([v2x_i, v2y_i]) * t
            else:
                t_post = t - tiempo_colision
                pos_colision_1 = pos_inicial_1 + np.array([v1x_i, v1y_i]) * tiempo_colision
                pos_colision_2 = pos_inicial_2 + np.array([v2x_i, v2y_i]) * tiempo_colision
                pos_1 = pos_colision_1 + np.array([v1x_f, v1y_f]) * t_post
                pos_2 = pos_colision_2 + np.array([v2x_f, v2y_f]) * t_post
                
            todas_pos_x.extend([pos_1[0], pos_2[0]])
            todas_pos_y.extend([pos_1[1], pos_2[1]])
        
        x_min, x_max = min(todas_pos_x) - 2, max(todas_pos_x) + 2
        y_min, y_max = min(todas_pos_y) - 2, max(todas_pos_y) + 2
        
        # Trayectorias de referencia
        t_ref = np.linspace(0, tiempo_colision, 50)
        tray_1_antes_x = pos_inicial_1[0] + v1x_i * t_ref
        tray_1_antes_y = pos_inicial_1[1] + v1y_i * t_ref
        tray_2_antes_x = pos_inicial_2[0] + v2x_i * t_ref
        tray_2_antes_y = pos_inicial_2[1] + v2y_i * t_ref
        
        pos_colision_1_ref = pos_inicial_1 + np.array([v1x_i, v1y_i]) * tiempo_colision
        pos_colision_2_ref = pos_inicial_2 + np.array([v2x_i, v2y_i]) * tiempo_colision
        tray_1_despues_x = pos_colision_1_ref[0] + v1x_f * t_ref
        tray_1_despues_y = pos_colision_1_ref[1] + v1y_f * t_ref
        tray_2_despues_x = pos_colision_2_ref[0] + v2x_f * t_ref
        tray_2_despues_y = pos_colision_2_ref[1] + v2y_f * t_ref
        
        # A√±adir trayectorias de referencia
        fig_anim.add_trace(go.Scatter(
            x=tray_1_antes_x, y=tray_1_antes_y,
            mode='lines', name='Trayectoria antes',
            line=dict(color='lightblue', dash='dot', width=2),
            opacity=0.6, showlegend=False
        ))
        
        fig_anim.add_trace(go.Scatter(
            x=tray_1_despues_x, y=tray_1_despues_y,
            mode='lines', name='Trayectoria despu√©s',
            line=dict(color='blue', dash='dot', width=2),
            opacity=0.6, showlegend=False
        ))
        
        fig_anim.add_trace(go.Scatter(
            x=tray_2_antes_x, y=tray_2_antes_y,
            mode='lines', name='Trayectoria antes',
            line=dict(color='lightcoral', dash='dot', width=2),
            opacity=0.6, showlegend=False
        ))
        
        fig_anim.add_trace(go.Scatter(
            x=tray_2_despues_x, y=tray_2_despues_y,
            mode='lines', name='Trayectoria despu√©s',
            line=dict(color='red', dash='dot', width=2),
            opacity=0.6, showlegend=False
        ))
        
        # Posici√≥n inicial de los objetos
        pos_1_inicial = pos_inicial_1
        pos_2_inicial = pos_inicial_2
        
        # Objetos principales
        fig_anim.add_trace(go.Scatter(
            x=[pos_1_inicial[0]], y=[pos_1_inicial[1]],
            mode='markers', name=f'Objeto 1 ({m1:.1f}kg)',
            marker=dict(size=25*np.sqrt(m1), color='blue', symbol='circle',
                       line=dict(width=3, color='darkblue')),
            hovertemplate='Objeto 1<br>Masa: %.1f kg<br>x: %%{x:.2f}m<br>y: %%{y:.2f}m<extra></extra>' % m1
        ))
        
        fig_anim.add_trace(go.Scatter(
            x=[pos_2_inicial[0]], y=[pos_2_inicial[1]],
            mode='markers', name=f'Objeto 2 ({m2:.1f}kg)',
            marker=dict(size=25*np.sqrt(m2), color='red', symbol='circle',
                       line=dict(width=3, color='darkred')),
            hovertemplate='Objeto 2<br>Masa: %.1f kg<br>x: %%{x:.2f}m<br>y: %%{y:.2f}m<extra></extra>' % m2
        ))
        
        # Vectores de velocidad iniciales
        if mostrar_vectores:
            escala_vector = 0.8
            vel_1_inicial = np.array([v1x_i, v1y_i]) * escala_vector
            vel_2_inicial = np.array([v2x_i, v2y_i]) * escala_vector
            
            # Vector objeto 1
            fig_anim.add_trace(go.Scatter(
                x=[pos_1_inicial[0], pos_1_inicial[0] + vel_1_inicial[0]],
                y=[pos_1_inicial[1], pos_1_inicial[1] + vel_1_inicial[1]],
                mode='lines+markers', name='Vector vel. Obj 1',
                line=dict(color='blue', width=4),
                marker=dict(size=[0, 15], color='blue', symbol=['circle', 'triangle-up']),
                showlegend=False
            ))
            
            # Vector objeto 2
            fig_anim.add_trace(go.Scatter(
                x=[pos_2_inicial[0], pos_2_inicial[0] + vel_2_inicial[0]],
                y=[pos_2_inicial[1], pos_2_inicial[1] + vel_2_inicial[1]],
                mode='lines+markers', name='Vector vel. Obj 2',
                line=dict(color='red', width=4),
                marker=dict(size=[0, 15], color='red', symbol=['circle', 'triangle-up']),
                showlegend=False
            ))
        
        # Crear frames para la animaci√≥n
frames = []
for i in range(frames_total):
    t = tiempos[i]
    
    # Calcular posiciones
    if t < tiempo_colision:
        pos_1 = pos_inicial_1 + np.array([v1x_i, v1y_i]) * t
        pos_2 = pos_inicial_2 + np.array([v2x_i, v2y_i]) * t
        vel_1 = np.array([v1x_i, v1y_i])
        vel_2 = np.array([v2x_i, v2y_i])
        fase = "Antes de la colisi√≥n"
    else:
        t_post = t - tiempo_colision
        pos_colision_1 = pos_inicial_1 + np.array([v1x_i, v1y_i]) * tiempo_colision
        pos_colision_2 = pos_inicial_2 + np.array([v2x_i, v2y_i]) * tiempo_colision
        pos_1 = pos_colision_1 + np.array([v1x_f, v1y_f]) * t_post
        pos_2 = pos_colision_2 + np.array([v2x_f, v2y_f]) * t_post
        vel_1 = np.array([v1x_f, v1y_f])
        vel_2 = np.array([v2x_f, v2y_f])
        fase = "Despu√©s de la colisi√≥n"
    
    # Preparar datos del frame - ORDEN CORRECTO:
    # 0-3: trayectorias de referencia (no se actualizan)
    # 4-5: objetos principales (SE ACTUALIZAN)
    # 6-7: vectores velocidad (SE ACTUALIZAN si est√°n habilitados)
    
    frame_data = [
        # Mantener las trayectorias de referencia (√≠ndices 0-3)
        go.Scatter(x=tray_1_antes_x, y=tray_1_antes_y, opacity=0.3),  # M√°s transparentes
        go.Scatter(x=tray_1_despues_x, y=tray_1_despues_y, opacity=0.3),
        go.Scatter(x=tray_2_antes_x, y=tray_2_antes_y, opacity=0.3),
        go.Scatter(x=tray_2_despues_x, y=tray_2_despues_y, opacity=0.3),
        
        # Actualizar objetos principales (√≠ndices 4-5)
        go.Scatter(
            x=[pos_1[0]], y=[pos_1[1]],
            mode='markers', 
            marker=dict(size=25*np.sqrt(m1), color='blue', symbol='circle',
                       line=dict(width=3, color='darkblue'))
        ),
        go.Scatter(
            x=[pos_2[0]], y=[pos_2[1]],
            mode='markers',
            marker=dict(size=25*np.sqrt(m2), color='red', symbol='circle',
                       line=dict(width=3, color='darkred'))
        )
    ]
    
    # Si hay vectores de velocidad, actualizar (√≠ndices 6-7)
    if mostrar_vectores:
        escala_vector = 0.8
        vel_1_escalada = vel_1 * escala_vector
        vel_2_escalada = vel_2 * escala_vector
        
        frame_data.extend([
            go.Scatter(
                x=[pos_1[0], pos_1[0] + vel_1_escalada[0]],
                y=[pos_1[1], pos_1[1] + vel_1_escalada[1]],
                mode='lines+markers',
                line=dict(color='blue', width=4),
                marker=dict(size=[0, 15], color='blue', symbol=['circle', 'triangle-up'])
            ),
            go.Scatter(
                x=[pos_2[0], pos_2[0] + vel_2_escalada[0]],
                y=[pos_2[1], pos_2[1] + vel_2_escalada[1]],
                mode='lines+markers',
                line=dict(color='red', width=4),
                marker=dict(size=[0, 15], color='red', symbol=['circle', 'triangle-up'])
            )
        ])
    
    frames.append(go.Frame(
        data=frame_data,
        name=str(i),
        layout=go.Layout(
            title=f"Colisi√≥n 2D - t = {t:.2f}s - {fase}<br>"
                  f"Tipo: {tipo_colision_2d} (e = {e_2d:.2f}) | "
                  f"Obj1: v=({vel_1[0]:.1f}, {vel_1[1]:.1f}) m/s | "
                  f"Obj2: v=({vel_2[0]:.1f}, {vel_2[1]:.1f}) m/s"
        )
    ))
        # Crear frames para la animaci√≥n
    fig_anim.frames = frames
        
        # Configurar layout de la animaci√≥n
    fig_anim.update_layout(
            title=f"Animaci√≥n Colisi√≥n 2D - {tipo_colision_2d} (e = {e_2d})",
            xaxis=dict(range=[x_min, x_max], title="Posici√≥n X (m)"),
            yaxis=dict(range=[y_min, y_max], title="Posici√≥n Y (m)", scaleanchor="x", scaleratio=1),
            height=700,
            updatemenus=[{
                'type': 'buttons',
                'buttons': [
                    {
                        'label': '‚ñ∂Ô∏è Play',
                        'method': 'animate',
                        'args': [None, {
                            'frame': {'duration': velocidad_animacion, 'redraw': True},
                            'transition': {'duration': 20},
                            'fromcurrent': True
                        }]
                    },
                    {
                        'label': '‚è∏Ô∏è Pause',
                        'method': 'animate',
                        'args': [[None], {
                            'frame': {'duration': 0, 'redraw': False},
                            'mode': 'immediate',
                            'transition': {'duration': 0}
                        }]
                    },
                    {
                        'label': '‚èπÔ∏è Reset',
                        'method': 'animate',
                        'args': [['0'], {
                            'frame': {'duration': 0, 'redraw': True},
                            'mode': 'immediate',
                            'transition': {'duration': 0}
                        }]
                    }
                ],
                'direction': 'left',
                'pad': {'r': 10, 't': 87},
                'showactive': False,
                'x': 0.1,
                'y': 0,
                'xanchor': 'right',
                'yanchor': 'top'
            }],
            sliders=[{
                'steps': [
                    {
                        'args': [[str(i)], {
                            'frame': {'duration': 0, 'redraw': True},
                            'mode': 'immediate',
                            'transition': {'duration': 0}
                        }],
                        'label': f'{tiempos[i]:.1f}s',
                        'method': 'animate'
                    }
                    for i in range(0, frames_total, 5)  # Cada 5 frames en el slider
                ],
                'active': 0,
                'currentvalue': {'prefix': 'Tiempo: '},
                'len': 0.9,
                'x': 0.1,
                'y': 0,
                'xanchor': 'left',
                'yanchor': 'top'
            }]
        )
        
    st.plotly_chart(fig_anim, use_container_width=True)
        
        # Informaci√≥n adicional sobre la animaci√≥n
    st.info("""
        **Controles de la animaci√≥n:**
        - ‚ñ∂Ô∏è **Play**: Inicia la animaci√≥n
        - ‚è∏Ô∏è **Pause**: Pausa la animaci√≥n
        - ‚èπÔ∏è **Reset**: Reinicia la animaci√≥n desde el principio
        - **Slider**: Permite navegar manualmente por la animaci√≥n
        
        **Elementos visualizados:**
        - **C√≠rculos**: Representan los objetos (tama√±o proporcional a la masa)
        - **L√≠neas punteadas**: Trayectorias de referencia
        - **Flechas**: Vectores de velocidad (si est√°n habilitados)
        - **Colores**: Azul para objeto 1, Rojo para objeto 2
       """)

    else:
        # Mostrar gr√°fico est√°tico si no se quiere animaci√≥n
        st.subheader('üìä An√°lisis Est√°tico de Trayector√≠as')
        
        # Crear visualizaci√≥n 2D est√°tica con Plotly
        fig = go.Figure()
        
        # Par√°metros para el gr√°fico est√°tico
        tiempo_total = 3.0
        tiempo_colision_static = 1.5
        
        # Posiciones para gr√°fico est√°tico
        pos_inicial_1_static = np.array([-5.0, 0.5])
        pos_inicial_2_static = np.array([3.0, -1.0])
        
        # Trayectorias antes de la colisi√≥n
        t_antes = np.linspace(0, tiempo_colision_static, 50)
        x1_antes = pos_inicial_1_static[0] + v1x_i * t_antes
        y1_antes = pos_inicial_1_static[1] + v1y_i * t_antes
        x2_antes = pos_inicial_2_static[0] + v2x_i * t_antes
        y2_antes = pos_inicial_2_static[1] + v2y_i * t_antes
        
        # Trayectorias despu√©s de la colisi√≥n
        t_despues = np.linspace(0, tiempo_total - tiempo_colision_static, 50)
        pos_colision_1_static = pos_inicial_1_static + np.array([v1x_i, v1y_i]) * tiempo_colision_static
        pos_colision_2_static = pos_inicial_2_static + np.array([v2x_i, v2y_i]) * tiempo_colision_static
        x1_despues = pos_colision_1_static[0] + v1x_f * t_despues
        y1_despues = pos_colision_1_static[1] + v1y_f * t_despues
        x2_despues = pos_colision_2_static[0] + v2x_f * t_despues
        y2_despues = pos_colision_2_static[1] + v2y_f * t_despues
        
        # A√±adir trayectorias
        fig.add_trace(go.Scatter(
            x=x1_antes, y=y1_antes,
            mode='lines',
            name='Objeto 1 (antes)',
            line=dict(color='blue', dash='dash', width=3),
            hovertemplate='Objeto 1 (antes colisi√≥n)<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        fig.add_trace(go.Scatter(
            x=x2_antes, y=y2_antes,
            mode='lines',
            name='Objeto 2 (antes)',
            line=dict(color='red', dash='dash', width=3),
            hovertemplate='Objeto 2 (antes colisi√≥n)<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        fig.add_trace(go.Scatter(
            x=x1_despues, y=y1_despues,
            mode='lines',
            name='Objeto 1 (despu√©s)',
            line=dict(color='blue', width=4),
            hovertemplate='Objeto 1 (despu√©s colisi√≥n)<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        fig.add_trace(go.Scatter(
            x=x2_despues, y=y2_despues,
            mode='lines',
            name='Objeto 2 (despu√©s)',
            line=dict(color='red', width=4),
            hovertemplate='Objeto 2 (despu√©s colisi√≥n)<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        # Posiciones iniciales y finales
        fig.add_trace(go.Scatter(
            x=[pos_inicial_1_static[0]], y=[pos_inicial_1_static[1]],
            mode='markers',
            name='Objeto 1 (inicio)',
            marker=dict(size=20*np.sqrt(m1), color='lightblue', symbol='circle',
                       line=dict(width=2, color='blue')),
            hovertemplate='Objeto 1 - Posici√≥n inicial<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        fig.add_trace(go.Scatter(
            x=[pos_inicial_2_static[0]], y=[pos_inicial_2_static[1]],
            mode='markers',
            name='Objeto 2 (inicio)',
            marker=dict(size=20*np.sqrt(m2), color='lightcoral', symbol='circle',
                       line=dict(width=2, color='red')),
            hovertemplate='Objeto 2 - Posici√≥n inicial<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        # Punto de colisi√≥n
        fig.add_trace(go.Scatter(
            x=[pos_colision_1_static[0]], y=[pos_colision_1_static[1]],
            mode='markers',
            name='Punto de colisi√≥n',
            marker=dict(size=30, color='yellow', symbol='star',
                       line=dict(width=3, color='orange')),
            hovertemplate='Punto de colisi√≥n<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        # Posiciones finales
        x1_final = x1_despues[-1]
        y1_final = y1_despues[-1]
        x2_final = x2_despues[-1]
        y2_final = y2_despues[-1]
        
        fig.add_trace(go.Scatter(
            x=[x1_final], y=[y1_final],
            mode='markers',
            name='Objeto 1 (final)',
            marker=dict(size=25*np.sqrt(m1), color='blue', symbol='circle',
                       line=dict(width=3, color='darkblue')),
            hovertemplate='Objeto 1 - Posici√≥n final<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        fig.add_trace(go.Scatter(
            x=[x2_final], y=[y2_final],
            mode='markers',
            name='Objeto 2 (final)',
            marker=dict(size=25*np.sqrt(m2), color='red', symbol='circle',
                       line=dict(width=3, color='darkred')),
            hovertemplate='Objeto 2 - Posici√≥n final<br>x: %{x:.2f}m<br>y: %{y:.2f}m<extra></extra>'
        ))
        
        # Vectores de velocidad en el punto de colisi√≥n
        if mostrar_vectores:
            escala = 0.5
            # Velocidades antes de la colisi√≥n
            fig.add_trace(go.Scatter(
                x=[pos_colision_1_static[0], pos_colision_1_static[0] + v1x_i*escala],
                y=[pos_colision_1_static[1], pos_colision_1_static[1] + v1y_i*escala],
                mode='lines+markers',
                name='v‚ÇÅ inicial',
                line=dict(color='lightblue', width=3),
                marker=dict(size=[0, 12], color='lightblue', symbol=['circle', 'triangle-up']),
                hovertemplate='Velocidad inicial Obj 1<br>v‚Çì: %.2f m/s<br>v·µß: %.2f m/s<extra></extra>' % (v1x_i, v1y_i)
            ))
            
            fig.add_trace(go.Scatter(
                x=[pos_colision_2_static[0], pos_colision_2_static[0] + v2x_i*escala],
                y=[pos_colision_2_static[1], pos_colision_2_static[1] + v2y_i*escala],
                mode='lines+markers',
                name='v‚ÇÇ inicial',
                line=dict(color='lightcoral', width=3),
                marker=dict(size=[0, 12], color='lightcoral', symbol=['circle', 'triangle-up']),
                hovertemplate='Velocidad inicial Obj 2<br>v‚Çì: %.2f m/s<br>v·µß: %.2f m/s<extra></extra>' % (v2x_i, v2y_i)
            ))
        
        # Configurar layout
        fig.update_layout(
            title=f"An√°lisis de Colisi√≥n 2D - {tipo_colision_2d} (e = {e_2d})",
            xaxis_title="Posici√≥n X (m)",
            yaxis_title="Posici√≥n Y (m)",
            height=600,
            hovermode='closest',
            yaxis=dict(scaleanchor="x", scaleratio=1),
            legend=dict(
                orientation="v",
                yanchor="top",
                y=1,
                xanchor="left",
                x=1.02
            )
        )
        
        # A√±adir l√≠neas de cuadr√≠cula
        fig.update_layout(
            xaxis=dict(showgrid=True, gridwidth=1, gridcolor='lightgray'),
            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='lightgray')
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabla de resumen
        st.subheader("üìã Resumen de Resultados")
        
        datos_resumen = {
            "Par√°metro": [
                "Momentum inicial X", "Momentum final X", "Momentum inicial Y", "Momentum final Y",
                "Energ√≠a cin√©tica inicial", "Energ√≠a cin√©tica final", "Energ√≠a perdida",
                "Velocidad inicial Obj 1", "Velocidad final Obj 1", "Velocidad inicial Obj 2", "Velocidad final Obj 2"
            ],
            "Valor": [
                f"{px_inicial:.3f} kg‚ãÖm/s", f"{px_final:.3f} kg‚ãÖm/s",
                f"{py_inicial:.3f} kg‚ãÖm/s", f"{py_final:.3f} kg‚ãÖm/s",
                f"{ke_inicial_2d:.3f} J", f"{ke_final_2d:.3f} J", f"{energia_perdida_2d:.3f} J",
                f"{np.sqrt(v1x_i**2 + v1y_i**2):.3f} m/s", f"{np.sqrt(v1x_f**2 + v1y_f**2):.3f} m/s",
                f"{np.sqrt(v2x_i**2 + v2y_i**2):.3f} m/s", f"{np.sqrt(v2x_f**2 + v2y_f**2):.3f} m/s"
            ],
            "Estado": [
                "‚úÖ" if conservacion_px else "‚ùå", "‚úÖ" if conservacion_px else "‚ùå",
                "‚úÖ" if conservacion_py else "‚ùå", "‚úÖ" if conservacion_py else "‚ùå",
                "üìä", "üìä", "‚ö†Ô∏è" if energia_perdida_2d > 0.01 else "‚úÖ",
                "üìç", "üìç", "üìç", "üìç"
            ]
        }
        
        df_resumen = pd.DataFrame(datos_resumen)
        st.dataframe(df_resumen, use_container_width=True, hide_index=True)
        
        # Secci√≥n de an√°lisis avanzado
        st.subheader("üî¨ An√°lisis Avanzado")
        
        col_analisis1, col_analisis2 = st.columns(2)
        
        with col_analisis1:
            st.markdown("**An√°lisis Vectorial:**")
            
            # √Ångulos de las velocidades
            angulo_v1i = np.degrees(np.arctan2(v1y_i, v1x_i)) if v1x_i != 0 else (90 if v1y_i > 0 else -90)
            angulo_v1f = np.degrees(np.arctan2(v1y_f, v1x_f)) if v1x_f != 0 else (90 if v1y_f > 0 else -90)
            angulo_v2i = np.degrees(np.arctan2(v2y_i, v2x_i)) if v2x_i != 0 else (90 if v2y_i > 0 else -90)
            angulo_v2f = np.degrees(np.arctan2(v2y_f, v2x_f)) if v2x_f != 0 else (90 if v2y_f > 0 else -90)
            
            st.write(f"üîµ **Objeto 1:**")
            st.write(f"  ‚Ä¢ √Ångulo inicial: {angulo_v1i:.1f}¬∞")
            st.write(f"  ‚Ä¢ √Ångulo final: {angulo_v1f:.1f}¬∞")
            st.write(f"  ‚Ä¢ Cambio de direcci√≥n: {abs(angulo_v1f - angulo_v1i):.1f}¬∞")
            
            st.write(f"üî¥ **Objeto 2:**")
            st.write(f"  ‚Ä¢ √Ångulo inicial: {angulo_v2i:.1f}¬∞")
            st.write(f"  ‚Ä¢ √Ångulo final: {angulo_v2f:.1f}¬∞")
            st.write(f"  ‚Ä¢ Cambio de direcci√≥n: {abs(angulo_v2f - angulo_v2i):.1f}¬∞")
    
        with col_analisis2:
            st.markdown("**Caracter√≠sticas de la Colisi√≥n:**")
            
            # Impulso
            impulso_1_x = m1 * (v1x_f - v1x_i)
            impulso_1_y = m1 * (v1y_f - v1y_i)
            impulso_1_mag = np.sqrt(impulso_1_x**2 + impulso_1_y**2)
            
            impulso_2_x = m2 * (v2x_f - v2x_i)
            impulso_2_y = m2 * (v2y_f - v2y_i)
            impulso_2_mag = np.sqrt(impulso_2_x**2 + impulso_2_y**2)
            
            st.write(f"**Impulso sobre Objeto 1:** {impulso_1_mag:.3f} N‚ãÖs")
            st.write(f"**Impulso sobre Objeto 2:** {impulso_2_mag:.3f} N‚ãÖs")
            
            # Porcentaje de energ√≠a perdida
            if ke_inicial_2d > 0:
                porcentaje_perdida = (energia_perdida_2d / ke_inicial_2d) * 100
                st.write(f"**Energ√≠a perdida:** {porcentaje_perdida:.1f}%")
            
            # Clasificaci√≥n de la colisi√≥n
            if e_2d >= 0.95:
                clasificacion = "Casi perfectamente el√°stica"
            elif e_2d >= 0.7:
                clasificacion = "Moderadamente el√°stica"
            elif e_2d >= 0.3:
                clasificacion = "Moderadamente inel√°stica"
            else:
                clasificacion = "Altamente inel√°stica"
            
            st.write(f"**Clasificaci√≥n:** {clasificacion}")
        
        # Ejercicios propuestos
        with st.expander("üìù Ejercicios Propuestos", expanded=False):
            st.markdown("""
            ### üéØ Ejercicios para Practicar
            
            **Ejercicio 1 - Colisi√≥n de Billar:**
            - Configura: m‚ÇÅ = m‚ÇÇ = 0.16 kg, v‚ÇÅ·µ¢ = (5, 0) m/s, v‚ÇÇ·µ¢ = (0, 0) m/s
            - √Ångulo de dispersi√≥n: 30¬∞, Colisi√≥n el√°stica
            - Analiza si se conserva tanto el momentum como la energ√≠a
            
            **Ejercicio 2 - Colisi√≥n de Autom√≥viles:**
            - Configura: m‚ÇÅ = 1200 kg, m‚ÇÇ = 800 kg
            - v‚ÇÅ·µ¢ = (15, 0) m/s, v‚ÇÇ·µ¢ = (0, 10) m/s
            - Colisi√≥n inel√°stica con e = 0.3
            - Calcula la energ√≠a perdida y explica qu√© pas√≥ con ella
            
            **Ejercicio 3 - Part√≠culas Subat√≥micas:**
            - Masas muy peque√±as: m‚ÇÅ = 2m‚ÇÇ
            - Velocidades altas: v‚ÇÅ·µ¢ = (1000, 0) m/s, v‚ÇÇ·µ¢ = (0, 500) m/s
            - Colisi√≥n el√°stica, √°ngulo 45¬∞
            - Compara con colisiones macrosc√≥picas
            
            **Desaf√≠o Avanzado:**
            - Encuentra las condiciones para que despu√©s de la colisi√≥n:
              - El objeto 1 se detenga completamente
              - El objeto 2 cambie su direcci√≥n 90¬∞
              - La energ√≠a cin√©tica total se reduzca a la mitad
            
            ### üß™ Investigaci√≥n Adicional
            1. ¬øC√≥mo afecta la forma de los objetos en colisiones reales?
            2. ¬øQu√© papel juega la fricci√≥n en colisiones sobre superficies?
            3. ¬øC√≥mo se analizan colisiones en 3 dimensiones?
            4. ¬øQu√© sucede en colisiones a velocidades relativistas?
            """)